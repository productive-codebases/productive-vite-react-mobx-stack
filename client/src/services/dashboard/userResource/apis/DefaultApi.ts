/* tslint:disable */
/* eslint-disable */
/**
 * UserResource
 * Get users
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Role,
    RoleFromJSON,
    RoleToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface UsersUserIdRolesGetRequest {
    userId: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get the list of roles
     */
    async rolesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Role>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleFromJSON));
    }

    /**
     * Get the list of roles
     */
    async rolesGet(initOverrides?: RequestInit): Promise<Array<Role>> {
        const response = await this.rolesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the list of users
     */
    async usersGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Get the list of users
     */
    async usersGet(initOverrides?: RequestInit): Promise<Array<User>> {
        const response = await this.usersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the roles of a user
     */
    async usersUserIdRolesGetRaw(requestParameters: UsersUserIdRolesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Role>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling usersUserIdRolesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{userId}/roles`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleFromJSON));
    }

    /**
     * Get the roles of a user
     */
    async usersUserIdRolesGet(requestParameters: UsersUserIdRolesGetRequest, initOverrides?: RequestInit): Promise<Array<Role>> {
        const response = await this.usersUserIdRolesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
